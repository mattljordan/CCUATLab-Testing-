trigger: none

pool:
  vmImage: ubuntu-latest

steps:
  - task: PowerShell@2
    displayName: 'Restore Compliance Policy from Latest GitHub Backup'
    env:
      UAT_SECRECT: $(UAT_SECRECT)
      GITHUB_TOKEN: $(GITHUB_TOKEN)
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        # Set up GitHub authentication (requires GITHUB_TOKEN secret in pipeline)
        git config --global user.email "mattljordan@users.noreply.github.com"
        git config --global user.name "mattljordan"

        # Clone the repo (shallow for speed)
        git clone --depth 1 https://mattljordan:${env:GITHUB_TOKEN}@github.com/mattljordan/CCUATLab-Testing-.git repo
        cd repo

        # Find the latest policy-*.json file
        $backupFile = Get-ChildItem -Path . -Filter 'policy-*.json' | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        if ($null -eq $backupFile) {
            Write-Error "No policy backup files found in $(Get-Location)."
            exit 1
        }
        Write-Host "Found backup file: $($backupFile.FullName)"
        $fileSize = (Get-Item $backupFile.FullName).Length
        Write-Host "File size: $fileSize bytes"
        Write-Host "Backup file exists: $(Test-Path $backupFile.FullName)"
        # Try reading with UTF8 encoding
        $json = Get-Content $backupFile.FullName -Raw -Encoding UTF8
        $bytes = [System.IO.File]::ReadAllBytes($backupFile.FullName)
        Write-Host "First 20 bytes: $($bytes[0..([Math]::Min(19, $bytes.Length-1))] -join ', ')"
        if ($json -eq $null) {
            Write-Host "Get-Content returned null"
        } elseif ($json -eq '') {
            Write-Host "Get-Content returned an empty string"
        }
        if (-not $json) {
            Write-Error "Backup file $($backupFile.FullName) is empty."
            exit 1
        }
        $preview = if ($json.Length -gt 200) { $json.Substring(0,200) + '...' } else { $json }
        Write-Host "First 200 chars of file: $preview"

        # Authenticate to Microsoft Graph
        $appid = '573989b7-ae80-4bad-9404-fb134eec76d5'
        $tenantid = '7b2d2c71-15d0-416f-afbb-bf763fb7cfe8'
        $secret = $env:UAT_SECRECT
        $body =  @{
            Grant_Type    = "client_credentials"
            Scope         = "https://graph.microsoft.com/.default"
            Client_Id     = $appid
            Client_Secret = $secret
        }
        $connection = Invoke-RestMethod `
            -Uri https://login.microsoftonline.com/$tenantid/oauth2/v2.0/token `
            -Method POST `
            -Body $body
        $token = $connection.access_token
        $headers = @{ Authorization = "Bearer $token"; 'Content-Type' = 'application/json' }

        # Function to test if a JSON string is valid
        Function Test-JSON() {
            param (
                $JSON
            )
            try {
                $TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop
                $validJson = $true
            }
            catch {
                $validJson = $false
                $_.Exception
            }
            if (!$validJson) {
                Write-Host "Provided JSON isn't in valid JSON format" -f Red
                return
            }
        }

        # Function to update a device compliance policy
        Function Update-DeviceCompliancePolicy() {
            param (
                [string]$JSON
            )
            $graphApiVersion = 'Beta'
            $Resource = "deviceManagement/deviceCompliancePolicies/dcf4a2bc-4df7-473e-9c23-acb9e7f8c991"
            try {
                Test-Json -Json $JSON
                $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
                Invoke-RestMethod -Uri $uri -Headers $headers -Method Patch -Body $JSON -ContentType 'application/json'
                Write-Host "Policy restored successfully." -ForegroundColor Green
            }
            catch {
                Write-Error $_.Exception.Message
                return
            }
        }
        Write-Host "$json"
        # Restore the policy
        Write-Host "Restoring from latest backup: $($backupFile.Name)"
        Update-DeviceCompliancePolicy -JSON $json
