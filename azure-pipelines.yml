steps:
  - task: PowerShell@2
    displayName: 'Install Microsoft.Graph Module'
    inputs:
      targetType: 'inline'
      script: |
        Install-Module -Name Microsoft.Graph -Force -Scope CurrentUser
        Import-Module Microsoft.Graph
      pwsh: true

  - task: DownloadSecureFile@1
    name: downloadCert
    displayName: 'Download Auth Certificate'
    inputs:
      secureFile: 'UAT_APP_REG.pfx'  # Replace with your uploaded certificate file name

  - task: PowerShell@2
    displayName: 'Run iOS Update Compliance Script'
    
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $certPath = "$(downloadCert.secureFilePath)"
        $certPassword = "$(CERT_PASSWORD)"  # Set this as a secret variable in your pipeline
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import($certPath, $certPassword, 'PersistKeySet')

        $appid = '573989b7-ae80-4bad-9404-fb134eec76d5'
        $tenantid = '7b2d2c71-15d0-416f-afbb-bf763fb7cfe8'

        # Connect to Microsoft Graph using the certificate's thumbprint
        Connect-MgGraph -ClientId $appid -TenantId $tenantid -CertificateThumbprint $cert.Thumbprint

        # Function to test if a JSON string is valid
        Function Test-JSON() {
            param (
                $JSON
            )
            try {
                $TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop
                $validJson = $true
            }
            catch {
                $validJson = $false
                $_.Exception
            }
            if (!$validJson) {
                Write-Host "Provided JSON isn't in valid JSON format" -f Red
                break
            }
        }

        # Function to retrieve device compliance policies from Microsoft Graph API
        Function Get-DeviceCompliancePolicy() {
            [cmdletbinding()]
            $graphApiVersion = 'Beta'
            $Resource = 'deviceManagement/deviceCompliancePolicies'
            try {
                $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
                (Invoke-MgGraphRequest -Uri $uri -Method Get).Value
            }
            catch {
                Write-Error $Error[0].ErrorDetails.Message
                break
            }
        }

        # Function to update a device compliance policy using Microsoft Graph API
        Function Update-DeviceCompliancePolicy() {
            $graphApiVersion = 'Beta'
            $Resource = "deviceManagement/deviceCompliancePolicies/dcf4a2bc-4df7-473e-9c23-acb9e7f8c991"
            try {
                Test-Json -Json $JSON
                $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
                Invoke-MgGraphRequest -Uri $uri -Method Patch -Body $JSON -ContentType 'application/json'
            }
            catch {
                Write-Error $Error[0].ErrorDetails.Message
                break
            }
        }

        # Function to get the latest Apple iOS/macOS updates from the Apple Developer RSS feed
        Function Get-AppleUpdates() {
            try {
                $uri = 'https://developer.apple.com/news/releases/rss/releases.rss'
                [xml]$Updates = (Invoke-WebRequest -Uri $uri -UseBasicParsing -ContentType 'application/xml').Content -replace '[^\x09\x0A\x0D\x20-\xD7FF\xE000-\xFFFD\x10000-x10FFFF]', ''
                $BuildVersion = @()
                foreach ($Update in $Updates.rss.channel.Item) {
                    if (($Update.title -like "*iOS*") -and ($Update.title -like "*26*") -and ($Update.title -notlike "*Beta*")) {
                        $BuildVersion += $Update.title
                    }
                }
                return $BuildVersion[0]
            }
            catch {
                Write-Error $Error[0].ErrorDetails.Message
                break
            }
        }

        # Get current date and set update description
        $Date = Get-Date -Format 'dd-MM-yyyy hh:mm:ss'
        $Description = "Updated Operating System Device Compliance Policy on $Date"

        # Retrieve the specific device compliance policy by ID
        $OSCompliancePolicies = Get-DeviceCompliancePolicy | Where-Object { ($_.id) -eq "dcf4a2bc-4df7-473e-9c23-acb9e7f8c991" }

        # Extract the major version from the current minimum OS version
        $Version = $OSCompliancePolicies.osMinimumVersion.SubString(0, 2)

        # Get the latest Apple iOS update for the detected version
        $AppleUpdate = Get-AppleUpdates -OS iOS -Version $Version
        if ($null -eq $AppleUpdate -or $AppleUpdate -eq "") {
            Write-Host "Apple update result is null or empty for iOS. Skipping policy update." -ForegroundColor Yellow
        } else {
            # Extract the build version number from the update string
            $Build = ($AppleUpdate | Select-String '\b\d+\.\d+\.\d+\b' -AllMatches).Matches.Value
            # Compare current policy version to latest build
            if ($OSCompliancePolicies.osMinimumVersion -ne $Build) {
                # Prepare update object for PATCH request
                $Update = New-Object -TypeName psobject
                $Update | Add-Member -MemberType NoteProperty -Name '@odata.type' -Value $OSCompliancePolicies.'@odata.type'
                $Update | Add-Member -MemberType NoteProperty -Name 'description' -Value $Description
                $Update | Add-Member -MemberType NoteProperty -Name 'osMinimumVersion' -Value $Build

                # Convert update object to JSON and send PATCH request
                $JSON = $Update | ConvertTo-Json -Depth 3
                Update-DeviceCompliancePolicy -Id $OSCompliancePolicies.id -JSON $JSON
                Write-Host "Updated iOS Compliance Policy $($OSCompliancePolicies.displayName) with latest Build: $Build" -ForegroundColor Green
                Write-Host
            } else {
                Write-Host "iOS Compliance Policy $($OSCompliancePolicy.displayName) already on latest Build: $Build" -ForegroundColor Cyan
                Write-Host
            }
        }

