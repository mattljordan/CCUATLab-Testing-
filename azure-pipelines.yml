trigger: none

pool:
  vmImage: ubuntu-latest




steps:
  # Step 1: Run iOS Update Compliance Script
  - task: PowerShell@2
    displayName: 'Step 1: Run iOS Update Compliance Script'
    env:
      UAT_SECRECT: $(UAT_SECRECT)
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        # Step 2: Authenticate to Microsoft Graph using client credentials
        $appid = '573989b7-ae80-4bad-9404-fb134eec76d5'
        $tenantid = '7b2d2c71-15d0-416f-afbb-bf763fb7cfe8'
        # Use the UAT_SECRECT GitHub Actions secret for the client secret
        $secret = $env:UAT_SECRECT

        $body =  @{
            Grant_Type    = "client_credentials"
            Scope         = "https://graph.microsoft.com/.default"
            Client_Id     = $appid
            Client_Secret = $secret
        }
        $connection = Invoke-RestMethod `
            -Uri https://login.microsoftonline.com/$tenantid/oauth2/v2.0/token `
            -Method POST `
            -Body $body
        $token = $connection.access_token
        # Prepare authorization header for web requests
        $headers = @{ Authorization = "Bearer $token"; 'Content-Type' = 'application/json' }
        
        # Step 3: Function to test if a JSON string is valid
        Function Test-JSON() {
            param (
                $JSON
            )
            try {
                $TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop
                $validJson = $true
            }
            catch {
                $validJson = $false
                $_.Exception
            }
            if (!$validJson) {
                Write-Host "Provided JSON isn't in valid JSON format" -f Red
                break
            }
        }

        # Step 4: Function to retrieve device compliance policies from Microsoft Graph API using web request
        Function Get-DeviceCompliancePolicy() {
            [cmdletbinding()]
            $graphApiVersion = 'Beta'
            $Resource = 'deviceManagement/deviceCompliancePolicies'
            try {
                $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
                (Invoke-RestMethod -Uri $uri -Headers $headers -Method Get).value
            }
            catch {
                Write-Error $_.Exception.Message
                break
            }
        }

        # Step 5: Function to update a device compliance policy using Microsoft Graph API via web request
        Function Update-DeviceCompliancePolicy() {
            $graphApiVersion = 'Beta'
            $Resource = "deviceManagement/deviceCompliancePolicies/dcf4a2bc-4df7-473e-9c23-acb9e7f8c991"
            try {
                Test-Json -Json $JSON
                $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
                Invoke-RestMethod -Uri $uri -Headers $headers -Method Patch -Body $JSON -ContentType 'application/json'
            }
            catch {
                Write-Error $_.Exception.Message
                break
            }
        }

        # Step 6: Function to get the latest Apple iOS/macOS updates from the Apple Developer RSS feed
        Function Get-AppleUpdates() {
            try {
                $uri = 'https://developer.apple.com/news/releases/rss/releases.rss'
                [xml]$Updates = (Invoke-WebRequest -Uri $uri -UseBasicParsing -ContentType 'application/xml').Content -replace '[^\x09\x0A\x0D\x20-\xD7FF\xE000-\xFFFD\x10000-x10FFFF]', ''
                $BuildVersion = @()
                foreach ($Update in $Updates.rss.channel.Item) {
                    if (($Update.title -like "*iOS*") -and ($Update.title -like "*26*") -and ($Update.title -notlike "*Beta*")) {
                        $BuildVersion += $Update.title
                    }
                }
                return $BuildVersion[0]
            }
            catch {
                Write-Error $Error[0].ErrorDetails.Message
                break
            }
        }

        # Step 7: Get current date and set update description
        $Date = Get-Date -Format 'dd-MM-yyyy hh:mm:ss'
        $Description = "Updated Operating System Device Compliance Policy on $Date"

        # Step 8: Retrieve the specific device compliance policy by ID
        $OSCompliancePolicies = Get-DeviceCompliancePolicy | Where-Object { ($_.id) -eq "dcf4a2bc-4df7-473e-9c23-acb9e7f8c991" }

        # Step 9: Extract the major version from the current minimum OS version
        $Version = $OSCompliancePolicies.osMinimumVersion.SubString(0, 2)

        # Step 10: Get the latest Apple iOS update for the detected version
        $AppleUpdate = Get-AppleUpdates -OS iOS -Version $Version
        if ($null -eq $AppleUpdate -or $AppleUpdate -eq "") {
            Write-Host "Apple update result is null or empty for iOS. Skipping policy update." -ForegroundColor Yellow
        } else {
        # Step 11: Extract the build version number from the update string
            $Build = ($AppleUpdate | Select-String '\b\d+\.\d+\.\d+\b' -AllMatches).Matches.Value}
        # Step 12: Compare current policy version to latest build
            if ($OSCompliancePolicies.osMinimumVersion -ne $Build) {
                # Step 13: Prepare update object for PATCH request
                $Update = New-Object -TypeName psobject
                $Update | Add-Member -MemberType NoteProperty -Name '@odata.type' -Value $OSCompliancePolicies.'@odata.type'
                $Update | Add-Member -MemberType NoteProperty -Name 'description' -Value $Description
                $Update | Add-Member -MemberType NoteProperty -Name 'osMinimumVersion' -Value $Build

                # Step 14: Convert update object to JSON and send PATCH request
                $JSON = $Update | ConvertTo-Json -Depth 3
                Update-DeviceCompliancePolicy -Id $OSCompliancePolicies.id -JSON $JSON
                Write-Host "Updated iOS Compliance Policy $($OSCompliancePolicies.displayName) with latest Build: $Build" -ForegroundColor Green
                Write-Host
            } else {
                Write-Host "iOS Compliance Policy $($OSCompliancePolicies.displayName) already on latest Build: $Build" -ForegroundColor Cyan
                Write-Host
            }
                   
                  $date = Get-Date -Format 'yyyyMMdd-HHmmss'
        $filename = "OSCompliancePolicy-$date.json"
        $OSCompliancePolicies | ConvertTo-Json -Depth 5 | Set-Content -Path $filename

        # Step13: Commit and push $filename to GitHub
        git config --global user.email "mattljordan@users.noreply.github.com"
        git config --global user.name "mattljordan"
        git add $filename
        git commit -m "Automated backup of $filename [skip ci]" || echo "No changes to commit"
        git remote set-url origin https://mattljordan:${env:GITHUB_TOKEN}@github.com/$(Build.Repository.Name).git
        git push origin HEAD:$(Build.SourceBranchName)
           # Backup all iOS Managed App Protection policies with name and date as filename, and commit to git
            $date = Get-Date -Format 'yyyyMMdd-HHmmss'
            $allPolicies = Invoke-RestMethod -Uri "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies" -Headers $headers -Method Get
            $iosPolicies = $allPolicies.value | Where-Object { $_.'@odata.type' -eq '#microsoft.graph.iosManagedAppProtection' }

            foreach ($policy in $iosPolicies) {
                $policyId = $policy.id
                $policyName = ($policy.displayName -replace '[^a-zA-Z0-9_-]', '_')
                $uri = "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies/$policyId"
                $fullPolicy = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
                $filename = "AppProtectionPolicy_${policyName}_$date.json"
                $fullPolicy | ConvertTo-Json -Depth 10 | Set-Content -Path $filename
                git add $filename
            }
            git config --global user.email "mattljordan@users.noreply.github.com"
            git config --global user.name "mattljordan"
            git commit -m "Automated backup of all App Protection Policies $date [skip ci]" || echo "No changes to commit"
            git remote set-url origin https://mattljordan:${env:GITHUB_TOKEN}@github.com/$(Build.Repository.Name).git
            git push origin HEAD:$(Build.SourceBranchName)


        # Step 14: Update all iOS App Protection Policies' Conditional Launch to the same iOS version
        # Get all managed app policies
        $allPolicies = Invoke-RestMethod -Uri "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies" -Headers $headers -Method Get

        # Filter for iOS managed app protection policies
        $iosPolicies = $allPolicies.value | Where-Object { $_.'@odata.type' -eq '#microsoft.graph.iosManagedAppProtection' }

        # Debug: Output the structure of a sample policy
        if ($iosPolicies.Count -gt 0) {
            $sampleId = $iosPolicies[0].id
            $samplePolicy = Invoke-RestMethod -Uri "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies/$sampleId" -Headers $headers -Method Get
            Write-Host "Sample iOS Managed App Protection Policy structure:" -ForegroundColor Yellow
            $samplePolicy | ConvertTo-Json -Depth 10 | Write-Host
        }

                foreach ($policy in $iosPolicies) {
            $policyId = $policy.id
            $uri = "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies/$policyId"
            # Get the full policy object
            $fullPolicy = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
            $fullPolicy.minimumWarningOsVersion = $Build
            # Remove read-only properties if present
            $fullPolicy.PSObject.Properties.Remove('id')
            $fullPolicy.PSObject.Properties.Remove('createdDateTime')
            $fullPolicy.PSObject.Properties.Remove('lastModifiedDateTime')
            $jsonUpdate = $fullPolicy | ConvertTo-Json -Depth 10
            Write-Host "PATCH body (full object):" -ForegroundColor Yellow
            Write-Host $jsonUpdate
            try {
                Invoke-RestMethod -Uri $uri -Headers $headers -Method Patch -Body $jsonUpdate -ContentType 'application/json'
                Write-Host "Updated App Protection Policy $($policy.displayName) to require minimumWarningOsVersion $Build" -ForegroundColor Green
            } catch {
                Write-Host "Failed to update $($policy.displayName): $($_.Exception.Message)" -ForegroundColor Red
        }}
  # Step 13: Commit and push compliance policy backup
  - task: PowerShell@2
    displayName: 'Step 13: Commit and push compliance policy backup'
    env:
      UAT_SECRECT: $(UAT_SECRECT)
      GITHUB_TOKEN: $(GITHUB_TOKEN)
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        # Authenticate to Microsoft Graph
        $appid = '573989b7-ae80-4bad-9404-fb134eec76d5'
        $tenantid = '7b2d2c71-15d0-416f-afbb-bf763fb7cfe8'
        $secret = $env:UAT_SECRECT
        $body =  @{
            Grant_Type    = "client_credentials"
            Scope         = "https://graph.microsoft.com/.default"
            Client_Id     = $appid
            Client_Secret = $secret
        }
        $connection = Invoke-RestMethod `
            -Uri https://login.microsoftonline.com/$tenantid/oauth2/v2.0/token `
            -Method POST `
            -Body $body
        $token = $connection.access_token
        $headers = @{ Authorization = "Bearer $token"; 'Content-Type' = 'application/json' }
        # Save compliance policy backup and push to GitHub
        $date = Get-Date -Format 'yyyyMMdd-HHmmss'
        $filename = "OSCompliancePolicy-$date.json"
        $OSCompliancePolicies | ConvertTo-Json -Depth 5 | Set-Content -Path $filename
        git config --global user.email "mattljordan@users.noreply.github.com"
        git config --global user.name "mattljordan"
        git add $filename
        git commit -m "Automated backup of $filename [skip ci]" || Write-Output "No changes to commit"
        git remote set-url origin https://mattljordan:${env:GITHUB_TOKEN}@github.com/$(Build.Repository.Name).git
        git push origin HEAD:$(Build.SourceBranchName)

        # Step 14: Update all iOS App Protection Policies' Conditional Launch
        - task: PowerShell@2
        displayName: 'Step 14: Update iOS App Protection Policies'
        env:
            UAT_SECRECT: $(UAT_SECRECT)
            GITHUB_TOKEN: $(GITHUB_TOKEN)
        inputs:
            targetType: 'inline'
            pwsh: true
            script: |
            # Authenticate to Microsoft Graph
            $appid = '573989b7-ae80-4bad-9404-fb134eec76d5'
            $tenantid = '7b2d2c71-15d0-416f-afbb-bf763fb7cfe8'
            $secret = $env:UAT_SECRECT
            $body =  @{
                Grant_Type    = "client_credentials"
                Scope         = "https://graph.microsoft.com/.default"
                Client_Id     = $appid
                Client_Secret = $secret
            }
            $connection = Invoke-RestMethod `
                -Uri https://login.microsoftonline.com/$tenantid/oauth2/v2.0/token `
                -Method POST `
                -Body $body
            $token = $connection.access_token
            $headers = @{ Authorization = "Bearer $token"; 'Content-Type' = 'application/json' }
            # Update all iOS App Protection Policies
            $allPolicies = Invoke-RestMethod -Uri "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies" -Headers $headers -Method Get
            $iosPolicies = $allPolicies.value | Where-Object { $_.'@odata.type' -eq '#microsoft.graph.iosManagedAppProtection' }
            foreach ($policy in $iosPolicies) {
                $policyId = $policy.id
                $uri = "https://graph.microsoft.com/beta/deviceAppManagement/managedAppPolicies/$policyId"
                $fullPolicy = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
                $fullPolicy.minimumWarningOsVersion = $Build
                $fullPolicy.PSObject.Properties.Remove('id')
                $fullPolicy.PSObject.Properties.Remove('createdDateTime')
                $fullPolicy.PSObject.Properties.Remove('lastModifiedDateTime')
                $jsonUpdate = $fullPolicy | ConvertTo-Json -Depth 10
                Write-Host "PATCH body (full object):" -ForegroundColor Yellow
                Write-Host $jsonUpdate
                try {
                Invoke-RestMethod -Uri $uri -Headers $headers -Method Patch -Body $jsonUpdate -ContentType 'application/json'
                Write-Host "Updated App Protection Policy $($policy.displayName) to require minimumWarningOsVersion $Build" -ForegroundColor Green
                } catch {
                Write-Host "Failed to update $($policy.displayName): $($_.Exception.Message)" -ForegroundColor Red
                }
            }

